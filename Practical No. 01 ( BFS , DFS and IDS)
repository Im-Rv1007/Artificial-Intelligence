graph = {
  'Arad' : ['Sibiu', 'Timisoara', 'Zerind'],
  'Bucharest' : ['Fagaras', 'Giurgiu', 'Pitesti', 'Urziceni'],
  'Craiova' : ['Dobreta', 'Pitesti', 'Rimnicu Vilcea'],
  'Dobreta' : ['Craiova', 'Mehadia'],
  'Eforie' : ['Hirsova'],
  'Fagaras' : ['Sibiu', 'Bucharest'],
  'Giurgiu': ['Bucharest'],
  'Hirsova': ['Eforie', 'Urziceni'],
  'Iasi': ['Neamt', 'Vaslui'],
  'Lugoj': ['Mehadia', 'Timisoara'],
  'Mehadia': ['Dobreta', 'Lugoj'],
  'Oradea': ['Sibiu', 'Zerind'],
  'Pitesti': ['Bucharest', 'Craiova', 'Rimnicu Vilcea'],
  'Rimnicu Vilcea': ['Craiova','Pitesti', 'Sibiu'],
  'Sibiu': ['Arad', 'Fagaras', 'Rimnicu Vilcea', 'Oradea'],
  'Timisoara': ['Arad', 'Lugoj'],
  'Urziceni': ['Bucharest', 'Hirsova', 'Iasi'],
  'Vaslui': ['Iasi', 'Urziceni'],
  'Zerind': ['Arad', 'Oradea'],
  'Neamt': ['Iasi']
}

#Implement Breadth First Search (BFS) algorithm

def bfs_shortest_path(graph, start, goal):
    # keep track of explored nodes
    explored = []
    # keep track of all the paths to be checked
    queue = [[start]]
 
    # return path if start is goal
    if start == goal:
        return "That was easy! Start = goal"
 
    # keeps looping until all possible paths have been checked
    while queue:
        # pop the first path from the queue
        path = queue.pop(0)
        # get the last node from the path
        node = path[-1]
        if node not in explored:
            neighbours = graph[node]
            # go through all neighbour nodes, construct a new path and
            # push it into the queue
            for neighbour in neighbours:
                new_path = list(path)
                new_path.append(neighbour)
                queue.append(new_path)
                # return path if neighbour is goal
                if neighbour == goal:
                    return new_path
 
            # mark node as explored
            explored.append(node)
 
    # in case there's no path between the 2 nodes
    return "So sorry, but a connecting path doesn't exist :("
 
bfs_shortest_path(graph, 'Arad', 'Fagaras')

#Implement Depth First Search (DFS) algorithm

def dfs_shortest_path(graph, source, dest):
  stack = [(source, [source])]; visited = set()

  while stack:
    (v, path) = stack.pop()
    if v not in visited:
      if v == dest:
        return path
      visited.add(v)
      for node in graph[v]:
        stack.append((node, path+[node]))
        
dfs_shortest_path(graph, 'Arad', 'Fagaras')


#Implement Iterative deepening Search (IDS) algorithm

